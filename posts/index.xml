<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on D. Tomov's Ramblings Repository</title><link>https://zakupower.github.io/posts/</link><description>Recent content in Posts on D. Tomov's Ramblings Repository</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Oct 2022 21:07:13 +0300</lastBuildDate><atom:link href="https://zakupower.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Considerations for running backend applications in multi-instance environment</title><link>https://zakupower.github.io/posts/multi-instance/</link><pubDate>Thu, 27 Oct 2022 21:07:13 +0300</pubDate><guid>https://zakupower.github.io/posts/multi-instance/</guid><description>Scheduled Jobs Scheduled jobs are to be avoided in multi-instance environment. The application I was working on relied on scheduled jobs for a lot of its operation. I would say scheduled jobs are very common in a lot of modern applications, so you have two choices.
Move all the scheduled jobs to a second application which would act as a worker application. - this is what my team did, because we already had such an application, but we weren&amp;rsquo;t fully utilizing it and still had jobs in our API application Introduce a locking mechanism for your scheduled jobs e.</description><content>&lt;h2 id="scheduled-jobs">Scheduled Jobs&lt;/h2>
&lt;p>Scheduled jobs are to be avoided in multi-instance environment. The application I was working on relied on scheduled jobs for a lot of its operation. I would say scheduled jobs are very common in a lot of modern applications, so you have two choices.&lt;/p>
&lt;ul>
&lt;li>Move all the scheduled jobs to a second application which would act as a &lt;strong>worker application&lt;/strong>. - this is what my team did, because we already had such an application, but we weren&amp;rsquo;t fully utilizing it and still had jobs in our API application&lt;/li>
&lt;li>Introduce a &lt;strong>locking mechanism for your scheduled jobs&lt;/strong> e.g. &lt;a href="https://github.com/lukas-krecan/ShedLock">Shedlock&lt;/a> - this is probably the choice for most application, since starting a new application that would just serve as a worker is unthinkable/unnecessary for most projects&lt;/li>
&lt;/ul>
&lt;h2 id="logging">Logging&lt;/h2>
&lt;p>I would say the first step would be to look at everything you are logging, and try to &lt;strong>reduce your logs as much as possible&lt;/strong>.&lt;/p>
&lt;p>Your logs are very important for your application, so when increasing the instance count you would have a lot more logs than with a single application. If you are not using a &lt;strong>log collecting, storing and searching solution&lt;/strong> you should introduce one now. One good such solution would be the &lt;a href="https://www.elastic.co/what-is/elk-stack">ELK stack&lt;/a> which many modern applications use, which includes Elasticsearch, Logstash and Kibana for very organized way of viewing your logs (if configured correctly).&lt;/p>
&lt;pre tabindex="0">&lt;code>TODO: Continue
&lt;/code>&lt;/pre></content></item><item><title>Initial Commit</title><link>https://zakupower.github.io/posts/initial-commit/</link><pubDate>Fri, 07 Oct 2022 23:10:28 +0300</pubDate><guid>https://zakupower.github.io/posts/initial-commit/</guid><description>Hello World!</description><content>&lt;p>Hello World!&lt;/p></content></item></channel></rss>