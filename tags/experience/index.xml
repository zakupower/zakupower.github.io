<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>experience on D. Tomov's Ramblings Repository</title><link>https://zakupower.github.io/tags/experience/</link><description>Recent content in experience on D. Tomov's Ramblings Repository</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Nov 2022 22:13:30 +0200</lastBuildDate><atom:link href="https://zakupower.github.io/tags/experience/index.xml" rel="self" type="application/rss+xml"/><item><title>Turns out Logging is hard</title><link>https://zakupower.github.io/posts/logging/</link><pubDate>Wed, 23 Nov 2022 22:13:30 +0200</pubDate><guid>https://zakupower.github.io/posts/logging/</guid><description>Turns out logging is hard! When I was a green junior developer I thought nothing of logging. It was just something that I knew I had to do. Rule I was following was, if exception occurs log it and rethrow if necessary. As it turns out that is the dumbest rule ever. Filling your logs with exceptions which are 1. already logged by application and 2. there is nothing useful about seeing them in the logs is unnecessary.</description><content>&lt;p>Turns out logging is hard! When I was a green junior developer I thought nothing of logging. It was just something that I knew I had to do. Rule I was following was, if exception occurs log it and rethrow if necessary. As it turns out that is the dumbest rule ever. Filling your logs with exceptions which are 1. already logged by application and 2. there is nothing useful about seeing them in the logs is unnecessary.&lt;/p>
&lt;h2 id="how-it-began">How it began&lt;/h2>
&lt;p>I stumbled upon this issue with an application that was being used by 300+ users at the same time, and these users were very active in specific timeslots 8:30 am to 12:00 pm and 16:00 pm to 20:00 pm. When application was released on PROD there were so many other issues that were being reported on the daily, and all were critical so we didn&amp;rsquo;t even notice how our logs went from 10 archived files per day to &lt;strong>100 to 900 archived files for 1 day&lt;/strong>.&lt;/p>
&lt;h2 id="what-were-the-issues">What were the issues&lt;/h2>
&lt;p>After our logs took a turn for the worse, we started doing analysis on what the issues were.&lt;/p>
&lt;h3 id="request-logging">Request logging&lt;/h3>
&lt;p>We wanted to keep track of the calls to our endpoints, and have them all stored for future analysis. Also we had some very tricky bugs which we wanted to pin point this way. We had our request logs turned on from day 1 of PROD Release. Turns out from all these request logging our application was being slowed down a lot. After discussing with POs and the client, we found out that we assumed (wrongly) we wanted to keep track and store all endpoints, but it turned out we only needed one endpoint. So we turned off all logs for other endpoints and kept this one.&lt;/p>
&lt;p>After some time, these logs were annoying to scroll through when looking at the other logs of the application, so we even moved this endpoint&amp;rsquo;s logs to a different log file structure with its own RollingAppender. This significantly improved the situation, and we were happy with our decisions. Now we had a separate log file structure, which we could analyze if needed for this endpoint.&lt;/p>
&lt;h3 id="the-obsolete-error-logging">The obsolete error logging&lt;/h3>
&lt;p>This was not enough for us, we still had 100s of archived log files for a day. So we went on to the next culprit obsolete error logs&lt;/p>
&lt;p>We gathered the logs from a single day of the application, and collected all errors which were logged. And we asked ourselves the question:&lt;/p>
&lt;ul>
&lt;li>Is this programmer or client error?
&lt;ul>
&lt;li>If programmer error -&amp;gt; Fix it&lt;/li>
&lt;li>If client error -&amp;gt; Truncate the error log as much as possible&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>There were multiple instances of validation errors, that we were just logging the whole stack trace and never using it for anything. These error were truncated to simple one line logs.&lt;/p>
&lt;h3 id="unexpected-ddos">Unexpected &amp;ldquo;DDOS&amp;rdquo;&lt;/h3>
&lt;p>This issue is something we should have noticed first, but we were ignoring the obvious. The most frequent error in our logs was a Unique Constraint Violation, that was happening on the main (most used) table of the application.&lt;/p>
&lt;p>Our most used endpoint, the one we were logging the requests for was an async operation, that validated the input without any DB hits and placed the request in a queue to be processed and return 200 OK, so the user doesn&amp;rsquo;t have to wait on a very expensive chain of operations that would happen after this endpoint is called. The Frontend application had a retry mechanism (because the information for this endpoint was very important to never be lost) that would call this endpoint. For some reason the retry mechanism was not working properly and was retrying the same resource 1000s of times per day. So except the traffic we were getting from users, we were also getting these retry requests based on local storage in the frontend. When we did the analysis it turned out in the span of 1 week, we were being sent 1000s of resources 1000s of times a day which were all failing with Unique Constraint Violation.&lt;/p>
&lt;p>We were being &amp;ldquo;DDOS-ed&amp;rdquo; by our own Frontend application, and this filled the logs to the brim and also slowed down the Backend application significantly (an issue we were also investigating in parallel to the logs).&lt;/p>
&lt;p>The solution for this was fixing the Frontend Retry mechanism, and also adding a simple (and fast) DB call which would check for already existing resource on the specific endpoint and before queueing the resource for processing throwing a 422 UNPROCESSABLE ENTITY error to the frontend so it can delete it from the local storage.&lt;/p>
&lt;h2 id="lessons-learned">Lessons learned&lt;/h2>
&lt;p>TODO(&amp;ldquo;Write this!&amp;rdquo;)&lt;/p>
&lt;h2 id="useful-articles">Useful Articles&lt;/h2>
&lt;p>&lt;a href="https://www.freecodecamp.org/news/how-to-use-logs-effectively-in-your-code">To Log, or Not to Log - An Alternative Strategy to Make Loggers your Friends (by Stanley Nguyen)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.codinghorror.com/the-problem-with-logging/">The Problem With Logging (by Jeff Atwood)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sobolevn.me/2020/03/do-not-log">Do not log (by Nikita Sobolev)&lt;/a>&lt;/p></content></item><item><title>Migrating from Java 11 to 17</title><link>https://zakupower.github.io/posts/java-17-upgrade/</link><pubDate>Tue, 08 Nov 2022 19:01:49 +0200</pubDate><guid>https://zakupower.github.io/posts/java-17-upgrade/</guid><description>Today I had to migrate our application from Java 11 to Java 17. I think I should get into the habit of always googling stuff and not just thinking &amp;ldquo;Yeah I know how to do it, I am going to be fine&amp;rdquo;. This time I did google what issues might come from the upgrade and thankfully not too many. I followed this guide by Nikita Zemnitsky @ NIX, which does a pretty good job of explaining what issues might come up, so I am not going to list them here again.</description><content>&lt;p>Today I had to migrate our application from Java 11 to Java 17. I think I should get into the habit of always googling stuff and not just thinking &amp;ldquo;Yeah I know how to do it, I am going to be fine&amp;rdquo;. This time I did google what issues might come from the upgrade and thankfully not too many. I followed &lt;a href="https://dev.to/nix/migrating-a-project-from-java-11-to-java-17-a-step-by-step-guide-for-developers-42n">this guide by Nikita Zemnitsky @ NIX&lt;/a>, which does a pretty good job of explaining what issues might come up, so I am not going to list them here again.&lt;/p>
&lt;h2 id="upgrade-your-libraries-frequently">Upgrade your libraries frequently&lt;/h2>
&lt;p>The migration was super easy because my team has a good dependency hygiene and we have already upgraded the troublesome dependencies which were described in the guide long before this Java 17 upgrade. This is something I will be following religiously for all my projects from here on out! I have worked on a lot of different projects, but never have we kept our libraries so up-to-date, as in this one. Yes it is sometimes annoying when a library brakes something, but in the long run the application is way more healthy this way.&lt;/p>
&lt;h2 id="maven-tests-issue">Maven tests issue&lt;/h2>
&lt;p>After the migration, the only issue that was left out of the article by Nikita was that my tests weren&amp;rsquo;t running. We were using the &lt;code>maven-surefire-plugin&lt;/code> to run our tests under maven when building the application. This somehow was causing all our tests to fail with the following error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Failed to execute goal org&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">apache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">maven&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span>maven&lt;span style="color:#f92672">-&lt;/span>surefire&lt;span style="color:#f92672">-&lt;/span>plugin&lt;span style="color:#f92672">:&lt;/span>2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">22&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>test &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">-&lt;/span>test&lt;span style="color:#f92672">)&lt;/span> on project Idlearn&lt;span style="color:#f92672">:&lt;/span> Execution &lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">-&lt;/span>test of goal org&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">apache&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">maven&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span>maven&lt;span style="color:#f92672">-&lt;/span>surefire&lt;span style="color:#f92672">-&lt;/span>plugin&lt;span style="color:#f92672">:&lt;/span>2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">22&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">2&lt;/span>&lt;span style="color:#f92672">:&lt;/span>test failed&lt;span style="color:#f92672">:&lt;/span> Unsupported &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">file&lt;/span> major version 61 &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Help 1&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Googling the error took me into a rabbit hole of getting the same response and that was &amp;ldquo;You are compiling the tests with java 17, but trying to run them under a different version&amp;rdquo;. Checking my maven setup multiple times with &lt;code>mvn -version&lt;/code>, to make sure I have the right maven version, and it is using the correct java, and my JAVA_HOME path is correct. But it seemed like it was correct, but it was not working. After some time spent googling and trying different approaches, I finally stumbled on &lt;a href="https://stackoverflow.com/questions/71496063/maven-surefire-test-failed-unsupported-class-file-major-version-61">this stack overflow question and answer&lt;/a>. So it turns out the newest version (2.22.2) of &lt;code>maven-surefire-plugin&lt;/code>, that is not a Milestone version, has not upgraded some of its dependencies related to ASM. So you have to add the dependency to it manually. &lt;em>(TBH didn&amp;rsquo;t even know I could do that with plugins)&lt;/em>&lt;/p>
&lt;p>After this issue everything else went smoothly, all tests were green and the application was running!&lt;/p>
&lt;h2 id="honorable-mentions">Honorable mentions&lt;/h2>
&lt;p>After the migration I decided to once again read &lt;a href="https://mydeveloperplanet.com/2021/09/28/whats-new-between-java-11-and-java-17/">the article about what is new in Java 17 from 11&lt;/a>, but this time without skimming through it. Besides the new features there is also two very interesting things in the introduction.&lt;/p>
&lt;h3 id="oraclejdk-17-is-free">OracleJDK 17 is free?&lt;/h3>
&lt;blockquote>
&lt;p>The Oracle licensing model has changed with the introduction of Java 17. Java 17 is issued under the new NFTC (Oracle No-Fee Terms and Conditions) license. It is therefore again allowed to use the Oracle JDK version for free for production and commercial use.&lt;/p>
&lt;/blockquote>
&lt;p>So it turns out Oracle found out that hiding their JDK behind a paywall for production and commercial use, was such a huge mistake on their part, and they switched back to it being free.
It was only natural for most companies to start using a free alternative, when there is one available. Whenever a library or software becomes paid, the first question from my manager would be &amp;ldquo;Is there a free alternative that does the same thing, and can be switched easily&amp;rdquo;, and for JDK it was such an easy switch to OpenJDK.&lt;/p>
&lt;h3 id="devjava">dev.java&lt;/h3>
&lt;p>I don&amp;rsquo;t know how recent this is,but Oracle has created a cool little (lets hope only for now) &lt;a href="https://dev.java/">website&lt;/a>. It has &lt;strong>tutorials&lt;/strong> with topics ranging from basic java syntax to new java features. Also there is information about &lt;strong>how you can contribute to Java&lt;/strong>, list of &lt;strong>communities you can participate in&lt;/strong>, and information about &lt;strong>future java projects&lt;/strong>.&lt;/p></content></item></channel></rss>